CCS PCH C Compiler, Version 5.015, 5967               25-Apr-16 10:30

               Filename:   F:\UAQ\RoboUAQ\Line_Followe_Pic\Line_Follower_UAQ_Alberto_Andy\Line_Follower_Pic.lst

               ROM used:   702 bytes (2%)
                           Largest free fragment is 32066
               RAM used:   4 (0%) at main() level
                           17 (1%) worst case
               Stack used: 6 locations
               Stack size: 31

*
0000:  GOTO   0268
.................... #include <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  DATA 68,6F
0006:  DATA 6C,61
0008:  DATA 00,00
*
0246:  TBLRD*+
0248:  MOVF   FF5,F
024A:  BZ    0264
024C:  MOVFF  FF6,05
0250:  MOVFF  FF7,06
0254:  MOVFF  FF5,07
0258:  BRA    01F4
025A:  MOVFF  05,FF6
025E:  MOVFF  06,FF7
0262:  BRA    0246
0264:  GOTO   02BA (RETURN)
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses XT,NOPROTECT,NOWDT,NOLVP 
.................... #use delay(clock=4M) 
*
000A:  CLRF   FEA
000C:  MOVLW  0A
000E:  MOVWF  FE9
0010:  MOVF   FEF,W
0012:  BZ    0030
0014:  MOVLW  01
0016:  MOVWF  01
0018:  CLRF   00
001A:  DECFSZ 00,F
001C:  BRA    001A
001E:  DECFSZ 01,F
0020:  BRA    0018
0022:  MOVLW  4A
0024:  MOVWF  00
0026:  DECFSZ 00,F
0028:  BRA    0026
002A:  BRA    002C
002C:  DECFSZ FEF,F
002E:  BRA    0014
0030:  RETURN 0
....................  
.................... #DEFINE use_portd_lcd TRUE 
.................... #define LCD_ENABLE_PIN  PIN_D0                                    //// 
.................... #define LCD_RS_PIN      PIN_D1                                    //// 
.................... #define LCD_RW_PIN      PIN_D2                                    //// 
.................... #define LCD_DATA4       PIN_D3                                    //// 
.................... #define LCD_DATA5       PIN_D4                                    //// 
.................... #define LCD_DATA6       PIN_D5                                    //// 
.................... #define LCD_DATA7       PIN_D6  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00C2:  BSF    F95.3
....................    output_float(LCD_DATA5); 
00C4:  BSF    F95.4
....................    output_float(LCD_DATA6); 
00C6:  BSF    F95.5
....................    output_float(LCD_DATA7); 
00C8:  BSF    F95.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00CA:  BSF    F8C.2
00CC:  BCF    F95.2
....................    delay_cycles(1); 
00CE:  NOP   
....................    lcd_output_enable(1); 
00D0:  BSF    F8C.0
00D2:  BCF    F95.0
....................    delay_cycles(1); 
00D4:  NOP   
....................    high = lcd_read_nibble(); 
00D6:  RCALL  0070
00D8:  MOVFF  01,0F
....................        
....................    lcd_output_enable(0); 
00DC:  BCF    F8C.0
00DE:  BCF    F95.0
....................    delay_cycles(1); 
00E0:  NOP   
....................    lcd_output_enable(1); 
00E2:  BSF    F8C.0
00E4:  BCF    F95.0
....................    delay_us(1); 
00E6:  NOP   
....................    low = lcd_read_nibble(); 
00E8:  RCALL  0070
00EA:  MOVFF  01,0E
....................        
....................    lcd_output_enable(0); 
00EE:  BCF    F8C.0
00F0:  BCF    F95.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00F2:  BCF    F95.3
....................    output_drive(LCD_DATA5); 
00F4:  BCF    F95.4
....................    output_drive(LCD_DATA6); 
00F6:  BCF    F95.5
....................    output_drive(LCD_DATA7); 
00F8:  BCF    F95.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00FA:  SWAPF  0F,W
00FC:  MOVWF  00
00FE:  MOVLW  F0
0100:  ANDWF  00,F
0102:  MOVF   00,W
0104:  IORWF  0E,W
0106:  MOVWF  01
0108:  GOTO   0118 (RETURN)
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0070:  CLRF   10
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0072:  BSF    F95.3
0074:  MOVLW  00
0076:  BTFSC  F83.3
0078:  MOVLW  01
007A:  IORWF  10,F
....................    n |= input(LCD_DATA5) << 1; 
007C:  BSF    F95.4
007E:  MOVLW  00
0080:  BTFSC  F83.4
0082:  MOVLW  01
0084:  MOVWF  00
0086:  BCF    FD8.0
0088:  RLCF   00,F
008A:  MOVF   00,W
008C:  IORWF  10,F
....................    n |= input(LCD_DATA6) << 2; 
008E:  BSF    F95.5
0090:  MOVLW  00
0092:  BTFSC  F83.5
0094:  MOVLW  01
0096:  MOVWF  00
0098:  RLCF   00,F
009A:  RLCF   00,F
009C:  MOVLW  FC
009E:  ANDWF  00,F
00A0:  MOVF   00,W
00A2:  IORWF  10,F
....................    n |= input(LCD_DATA7) << 3; 
00A4:  BSF    F95.6
00A6:  MOVLW  00
00A8:  BTFSC  F83.6
00AA:  MOVLW  01
00AC:  MOVWF  00
00AE:  RLCF   00,F
00B0:  RLCF   00,F
00B2:  RLCF   00,F
00B4:  MOVLW  F8
00B6:  ANDWF  00,F
00B8:  MOVF   00,W
00BA:  IORWF  10,F
....................     
....................    return(n); 
00BC:  MOVFF  10,01
....................   #else 
00C0:  RETURN 0
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0032:  BTFSC  0F.0
0034:  BRA    003A
0036:  BCF    F8C.3
0038:  BRA    003C
003A:  BSF    F8C.3
003C:  BCF    F95.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
003E:  BTFSC  0F.1
0040:  BRA    0046
0042:  BCF    F8C.4
0044:  BRA    0048
0046:  BSF    F8C.4
0048:  BCF    F95.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
004A:  BTFSC  0F.2
004C:  BRA    0052
004E:  BCF    F8C.5
0050:  BRA    0054
0052:  BSF    F8C.5
0054:  BCF    F95.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0056:  BTFSC  0F.3
0058:  BRA    005E
005A:  BCF    F8C.6
005C:  BRA    0060
005E:  BSF    F8C.6
0060:  BCF    F95.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0062:  NOP   
....................    lcd_output_enable(1); 
0064:  BSF    F8C.0
0066:  BCF    F95.0
....................    delay_us(2); 
0068:  BRA    006A
....................    lcd_output_enable(0); 
006A:  BCF    F8C.0
006C:  BCF    F95.0
006E:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
010C:  BCF    F95.0
....................    lcd_rs_tris(); 
010E:  BCF    F95.1
....................    lcd_rw_tris(); 
0110:  BCF    F95.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0112:  BCF    F8C.1
0114:  BCF    F95.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
0116:  BRA    00C2
0118:  MOVFF  01,0E
011C:  BTFSC  01.7
011E:  BRA    0116
....................    lcd_output_rs(address); 
0120:  MOVF   0C,F
0122:  BNZ   0128
0124:  BCF    F8C.1
0126:  BRA    012A
0128:  BSF    F8C.1
012A:  BCF    F95.1
....................    delay_cycles(1); 
012C:  NOP   
....................    lcd_output_rw(0); 
012E:  BCF    F8C.2
0130:  BCF    F95.2
....................    delay_cycles(1); 
0132:  NOP   
....................    lcd_output_enable(0); 
0134:  BCF    F8C.0
0136:  BCF    F95.0
....................    lcd_send_nibble(n >> 4); 
0138:  SWAPF  0D,W
013A:  MOVWF  0E
013C:  MOVLW  0F
013E:  ANDWF  0E,F
0140:  MOVFF  0E,0F
0144:  RCALL  0032
....................    lcd_send_nibble(n & 0xf); 
0146:  MOVF   0D,W
0148:  ANDLW  0F
014A:  MOVWF  0E
014C:  MOVWF  0F
014E:  RCALL  0032
0150:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0152:  MOVLW  28
0154:  MOVWF  06
0156:  MOVLW  0C
0158:  MOVWF  07
015A:  MOVLW  01
015C:  MOVWF  08
015E:  MOVLW  06
0160:  MOVWF  09
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0162:  BCF    F8C.0
0164:  BCF    F95.0
....................    lcd_output_rs(0); 
0166:  BCF    F8C.1
0168:  BCF    F95.1
....................    lcd_output_rw(0); 
016A:  BCF    F8C.2
016C:  BCF    F95.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
016E:  BCF    F95.3
....................    output_drive(LCD_DATA5); 
0170:  BCF    F95.4
....................    output_drive(LCD_DATA6); 
0172:  BCF    F95.5
....................    output_drive(LCD_DATA7); 
0174:  BCF    F95.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0176:  BCF    F95.0
....................    lcd_rs_tris(); 
0178:  BCF    F95.1
....................    lcd_rw_tris(); 
017A:  BCF    F95.2
....................  #endif 
....................      
....................    delay_ms(15); 
017C:  MOVLW  0F
017E:  MOVWF  0A
0180:  RCALL  000A
....................    for(i=1;i<=3;++i) 
0182:  MOVLW  01
0184:  MOVWF  05
0186:  MOVF   05,W
0188:  SUBLW  03
018A:  BNC   019C
....................    { 
....................        lcd_send_nibble(3); 
018C:  MOVLW  03
018E:  MOVWF  0F
0190:  RCALL  0032
....................        delay_ms(5); 
0192:  MOVLW  05
0194:  MOVWF  0A
0196:  RCALL  000A
0198:  INCF   05,F
019A:  BRA    0186
....................    } 
....................     
....................    lcd_send_nibble(2); 
019C:  MOVLW  02
019E:  MOVWF  0F
01A0:  RCALL  0032
....................    delay_ms(5); 
01A2:  MOVLW  05
01A4:  MOVWF  0A
01A6:  RCALL  000A
....................    for(i=0;i<=3;++i) 
01A8:  CLRF   05
01AA:  MOVF   05,W
01AC:  SUBLW  03
01AE:  BNC   01CE
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
01B0:  CLRF   03
01B2:  MOVF   05,W
01B4:  ADDLW  06
01B6:  MOVWF  FE9
01B8:  MOVLW  00
01BA:  ADDWFC 03,W
01BC:  MOVWF  FEA
01BE:  MOVFF  FEF,0A
01C2:  CLRF   0C
01C4:  MOVFF  0A,0D
01C8:  RCALL  010C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01CA:  INCF   05,F
01CC:  BRA    01AA
01CE:  GOTO   02A8 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
01D2:  DECFSZ 09,W
01D4:  BRA    01D8
01D6:  BRA    01DE
....................       address=LCD_LINE_TWO; 
01D8:  MOVLW  40
01DA:  MOVWF  0A
01DC:  BRA    01E0
....................    else 
....................       address=0; 
01DE:  CLRF   0A
....................       
....................    address+=x-1; 
01E0:  MOVLW  01
01E2:  SUBWF  08,W
01E4:  ADDWF  0A,F
....................    lcd_send_byte(0,0x80|address); 
01E6:  MOVF   0A,W
01E8:  IORLW  80
01EA:  MOVWF  0B
01EC:  CLRF   0C
01EE:  MOVWF  0D
01F0:  RCALL  010C
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01F2:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01F4:  MOVF   07,W
01F6:  XORLW  07
01F8:  BZ    0208
01FA:  XORLW  0B
01FC:  BZ    0212
01FE:  XORLW  06
0200:  BZ    0222
0202:  XORLW  02
0204:  BZ    022E
0206:  BRA    0238
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0208:  MOVLW  01
020A:  MOVWF  08
020C:  MOVWF  09
020E:  RCALL  01D2
0210:  BRA    0242
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0212:  CLRF   0C
0214:  MOVLW  01
0216:  MOVWF  0D
0218:  RCALL  010C
....................                      delay_ms(2); 
021A:  MOVLW  02
021C:  MOVWF  0A
021E:  RCALL  000A
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0220:  BRA    0242
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0222:  MOVLW  01
0224:  MOVWF  08
0226:  MOVLW  02
0228:  MOVWF  09
022A:  RCALL  01D2
022C:  BRA    0242
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
022E:  CLRF   0C
0230:  MOVLW  10
0232:  MOVWF  0D
0234:  RCALL  010C
0236:  BRA    0242
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0238:  MOVLW  01
023A:  MOVWF  0C
023C:  MOVFF  07,0D
0240:  RCALL  010C
....................      #endif 
....................    } 
0242:  GOTO   025A (RETURN)
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... void main() 
*
0268:  CLRF   FF8
026A:  BCF    FD0.7
026C:  MOVF   FC1,W
026E:  ANDLW  C0
0270:  IORLW  0F
0272:  MOVWF  FC1
0274:  MOVLW  07
0276:  MOVWF  FB4
.................... { 
.................... // CONFIGURACION PWM 
....................   setup_ccp1(CCP_PWM); 
0278:  BCF    F94.2
027A:  BCF    F8B.2
027C:  MOVLW  0C
027E:  MOVWF  FBD
0280:  CLRF   FB7
0282:  CLRF   FB6
....................    setup_ccp2(CCP_PWM); 
0284:  BCF    F94.1
0286:  BCF    F8B.1
0288:  MOVWF  FBA
....................    setup_timer_2(T2_DIV_BY_4,250,1); // PWM de 1khz 
028A:  MOVLW  00
028C:  IORLW  05
028E:  MOVWF  FCA
0290:  MOVLW  FA
0292:  MOVWF  FCB
....................    set_pwm1_duty(1000); 
0294:  MOVWF  FBE
0296:  MOVF   FBD,W
0298:  ANDLW  CF
029A:  MOVWF  FBD
....................    set_pwm2_duty(500); 
029C:  MOVLW  7D
029E:  MOVWF  FBB
02A0:  MOVF   FBA,W
02A2:  ANDLW  CF
02A4:  MOVWF  FBA
.................... //CONFIGURACION LCD  
....................    lcd_init(); 
02A6:  BRA    0152
....................    while(TRUE) 
....................    { 
....................       lcd_gotoxy(1,1); 
02A8:  MOVLW  01
02AA:  MOVWF  08
02AC:  MOVWF  09
02AE:  RCALL  01D2
....................       printf(lcd_putc,"hola"); 
02B0:  MOVLW  04
02B2:  MOVWF  FF6
02B4:  MOVLW  00
02B6:  MOVWF  FF7
02B8:  BRA    0246
02BA:  BRA    02A8
....................     
....................       
....................    } 
.................... } 
02BC:  SLEEP 

Configuration Fuses:
   Word  1: C03F   PLL12 CPUDIV4 USBDIV XT FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
