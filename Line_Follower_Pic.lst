CCS PCH C Compiler, Version 5.015, 5967               25-Apr-16 10:50

               Filename:   F:\UAQ\RoboUAQ\Line_Followe_Pic\Line_Follower_UAQ_Alberto_Andy\Line_Follower_Pic.lst

               ROM used:   1114 bytes (3%)
                           Largest free fragment is 31654
               RAM used:   22 (1%) at main() level
                           43 (2%) worst case
               Stack used: 6 locations
               Stack size: 31

*
0000:  GOTO   036E
.................... #include <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  DATA 68,6F
0006:  DATA 6C,61
0008:  DATA 00,00
000A:  DATA 0C,00
*
0246:  TBLRD*+
0248:  MOVF   FF5,F
024A:  BZ    0264
024C:  MOVFF  FF6,15
0250:  MOVFF  FF7,16
0254:  MOVFF  FF5,20
0258:  RCALL  01F6
025A:  MOVFF  15,FF6
025E:  MOVFF  16,FF7
0262:  BRA    0246
0264:  RETURN 0
*
02B2:  MOVFF  FEA,1F
02B6:  MOVFF  FE9,1E
02BA:  SWAPF  18,W
02BC:  IORLW  F0
02BE:  MOVWF  1A
02C0:  ADDWF  1A,F
02C2:  ADDLW  E2
02C4:  MOVWF  1B
02C6:  ADDLW  32
02C8:  MOVWF  1D
02CA:  MOVF   18,W
02CC:  ANDLW  0F
02CE:  ADDWF  1B,F
02D0:  ADDWF  1B,F
02D2:  ADDWF  1D,F
02D4:  ADDLW  E9
02D6:  MOVWF  1C
02D8:  ADDWF  1C,F
02DA:  ADDWF  1C,F
02DC:  SWAPF  17,W
02DE:  ANDLW  0F
02E0:  ADDWF  1C,F
02E2:  ADDWF  1D,F
02E4:  RLCF   1C,F
02E6:  RLCF   1D,F
02E8:  COMF   1D,F
02EA:  RLCF   1D,F
02EC:  MOVF   17,W
02EE:  ANDLW  0F
02F0:  ADDWF  1D,F
02F2:  RLCF   1A,F
02F4:  MOVLW  07
02F6:  MOVWF  19
02F8:  MOVLW  0A
02FA:  DECF   1C,F
02FC:  ADDWF  1D,F
02FE:  BNC   02FA
0300:  DECF   1B,F
0302:  ADDWF  1C,F
0304:  BNC   0300
0306:  DECF   1A,F
0308:  ADDWF  1B,F
030A:  BNC   0306
030C:  DECF   19,F
030E:  ADDWF  1A,F
0310:  BNC   030C
0312:  CLRF   FEA
0314:  MOVLW  19
0316:  MOVWF  FE9
0318:  MOVLW  07
031A:  ANDWF  1E,W
031C:  BCF    1E.6
031E:  ADDWF  FE9,F
0320:  MOVLW  00
0322:  ADDWFC FEA,F
0324:  MOVF   FE9,W
0326:  SUBLW  1D
0328:  BNZ   0330
032A:  MOVF   FEA,F
032C:  BNZ   0330
032E:  BSF    1E.6
0330:  MOVF   FEF,W
0332:  MOVWF  00
0334:  BNZ   0346
0336:  BTFSC  1E.6
0338:  BRA    0346
033A:  BTFSC  1E.4
033C:  BRA    0364
033E:  BTFSC  1E.3
0340:  BRA    0346
0342:  MOVLW  20
0344:  BRA    034C
0346:  BSF    1E.3
0348:  BCF    1E.4
034A:  MOVLW  30
034C:  ADDWF  00,F
034E:  MOVFF  FEA,18
0352:  MOVFF  FE9,17
0356:  MOVFF  00,20
035A:  RCALL  01F6
035C:  MOVFF  18,FEA
0360:  MOVFF  17,FE9
0364:  MOVF   FEE,W
0366:  BTFSS  1E.6
0368:  BRA    0324
036A:  GOTO   043A (RETURN)
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses XT,NOPROTECT,NOWDT,NOLVP 
.................... #use delay(clock=4M) 
*
000C:  CLRF   FEA
000E:  MOVLW  21
0010:  MOVWF  FE9
0012:  MOVF   FEF,W
0014:  BZ    0032
0016:  MOVLW  01
0018:  MOVWF  01
001A:  CLRF   00
001C:  DECFSZ 00,F
001E:  BRA    001C
0020:  DECFSZ 01,F
0022:  BRA    001A
0024:  MOVLW  4A
0026:  MOVWF  00
0028:  DECFSZ 00,F
002A:  BRA    0028
002C:  BRA    002E
002E:  DECFSZ FEF,F
0030:  BRA    0016
0032:  RETURN 0
....................  
.................... #DEFINE use_portd_lcd TRUE 
.................... #define LCD_ENABLE_PIN  PIN_D0                                    //// 
.................... #define LCD_RS_PIN      PIN_D1                                    //// 
.................... #define LCD_RW_PIN      PIN_D2                                    //// 
.................... #define LCD_DATA4       PIN_D3                                    //// 
.................... #define LCD_DATA5       PIN_D4                                    //// 
.................... #define LCD_DATA6       PIN_D5                                    //// 
.................... #define LCD_DATA7       PIN_D6  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00C4:  BSF    F95.3
....................    output_float(LCD_DATA5); 
00C6:  BSF    F95.4
....................    output_float(LCD_DATA6); 
00C8:  BSF    F95.5
....................    output_float(LCD_DATA7); 
00CA:  BSF    F95.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00CC:  BSF    F8C.2
00CE:  BCF    F95.2
....................    delay_cycles(1); 
00D0:  NOP   
....................    lcd_output_enable(1); 
00D2:  BSF    F8C.0
00D4:  BCF    F95.0
....................    delay_cycles(1); 
00D6:  NOP   
....................    high = lcd_read_nibble(); 
00D8:  RCALL  0072
00DA:  MOVFF  01,28
....................        
....................    lcd_output_enable(0); 
00DE:  BCF    F8C.0
00E0:  BCF    F95.0
....................    delay_cycles(1); 
00E2:  NOP   
....................    lcd_output_enable(1); 
00E4:  BSF    F8C.0
00E6:  BCF    F95.0
....................    delay_us(1); 
00E8:  NOP   
....................    low = lcd_read_nibble(); 
00EA:  RCALL  0072
00EC:  MOVFF  01,27
....................        
....................    lcd_output_enable(0); 
00F0:  BCF    F8C.0
00F2:  BCF    F95.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00F4:  BCF    F95.3
....................    output_drive(LCD_DATA5); 
00F6:  BCF    F95.4
....................    output_drive(LCD_DATA6); 
00F8:  BCF    F95.5
....................    output_drive(LCD_DATA7); 
00FA:  BCF    F95.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00FC:  SWAPF  28,W
00FE:  MOVWF  00
0100:  MOVLW  F0
0102:  ANDWF  00,F
0104:  MOVF   00,W
0106:  IORWF  27,W
0108:  MOVWF  01
010A:  GOTO   011A (RETURN)
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0072:  CLRF   29
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0074:  BSF    F95.3
0076:  MOVLW  00
0078:  BTFSC  F83.3
007A:  MOVLW  01
007C:  IORWF  29,F
....................    n |= input(LCD_DATA5) << 1; 
007E:  BSF    F95.4
0080:  MOVLW  00
0082:  BTFSC  F83.4
0084:  MOVLW  01
0086:  MOVWF  00
0088:  BCF    FD8.0
008A:  RLCF   00,F
008C:  MOVF   00,W
008E:  IORWF  29,F
....................    n |= input(LCD_DATA6) << 2; 
0090:  BSF    F95.5
0092:  MOVLW  00
0094:  BTFSC  F83.5
0096:  MOVLW  01
0098:  MOVWF  00
009A:  RLCF   00,F
009C:  RLCF   00,F
009E:  MOVLW  FC
00A0:  ANDWF  00,F
00A2:  MOVF   00,W
00A4:  IORWF  29,F
....................    n |= input(LCD_DATA7) << 3; 
00A6:  BSF    F95.6
00A8:  MOVLW  00
00AA:  BTFSC  F83.6
00AC:  MOVLW  01
00AE:  MOVWF  00
00B0:  RLCF   00,F
00B2:  RLCF   00,F
00B4:  RLCF   00,F
00B6:  MOVLW  F8
00B8:  ANDWF  00,F
00BA:  MOVF   00,W
00BC:  IORWF  29,F
....................     
....................    return(n); 
00BE:  MOVFF  29,01
....................   #else 
00C2:  RETURN 0
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0034:  BTFSC  28.0
0036:  BRA    003C
0038:  BCF    F8C.3
003A:  BRA    003E
003C:  BSF    F8C.3
003E:  BCF    F95.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0040:  BTFSC  28.1
0042:  BRA    0048
0044:  BCF    F8C.4
0046:  BRA    004A
0048:  BSF    F8C.4
004A:  BCF    F95.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
004C:  BTFSC  28.2
004E:  BRA    0054
0050:  BCF    F8C.5
0052:  BRA    0056
0054:  BSF    F8C.5
0056:  BCF    F95.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0058:  BTFSC  28.3
005A:  BRA    0060
005C:  BCF    F8C.6
005E:  BRA    0062
0060:  BSF    F8C.6
0062:  BCF    F95.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0064:  NOP   
....................    lcd_output_enable(1); 
0066:  BSF    F8C.0
0068:  BCF    F95.0
....................    delay_us(2); 
006A:  BRA    006C
....................    lcd_output_enable(0); 
006C:  BCF    F8C.0
006E:  BCF    F95.0
0070:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
010E:  BCF    F95.0
....................    lcd_rs_tris(); 
0110:  BCF    F95.1
....................    lcd_rw_tris(); 
0112:  BCF    F95.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0114:  BCF    F8C.1
0116:  BCF    F95.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
0118:  BRA    00C4
011A:  MOVFF  01,27
011E:  BTFSC  01.7
0120:  BRA    0118
....................    lcd_output_rs(address); 
0122:  MOVF   25,F
0124:  BNZ   012A
0126:  BCF    F8C.1
0128:  BRA    012C
012A:  BSF    F8C.1
012C:  BCF    F95.1
....................    delay_cycles(1); 
012E:  NOP   
....................    lcd_output_rw(0); 
0130:  BCF    F8C.2
0132:  BCF    F95.2
....................    delay_cycles(1); 
0134:  NOP   
....................    lcd_output_enable(0); 
0136:  BCF    F8C.0
0138:  BCF    F95.0
....................    lcd_send_nibble(n >> 4); 
013A:  SWAPF  26,W
013C:  MOVWF  27
013E:  MOVLW  0F
0140:  ANDWF  27,F
0142:  MOVFF  27,28
0146:  RCALL  0034
....................    lcd_send_nibble(n & 0xf); 
0148:  MOVF   26,W
014A:  ANDLW  0F
014C:  MOVWF  27
014E:  MOVWF  28
0150:  RCALL  0034
0152:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0154:  MOVLW  28
0156:  MOVWF  16
0158:  MOVLW  0C
015A:  MOVWF  17
015C:  MOVLW  01
015E:  MOVWF  18
0160:  MOVLW  06
0162:  MOVWF  19
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0164:  BCF    F8C.0
0166:  BCF    F95.0
....................    lcd_output_rs(0); 
0168:  BCF    F8C.1
016A:  BCF    F95.1
....................    lcd_output_rw(0); 
016C:  BCF    F8C.2
016E:  BCF    F95.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0170:  BCF    F95.3
....................    output_drive(LCD_DATA5); 
0172:  BCF    F95.4
....................    output_drive(LCD_DATA6); 
0174:  BCF    F95.5
....................    output_drive(LCD_DATA7); 
0176:  BCF    F95.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0178:  BCF    F95.0
....................    lcd_rs_tris(); 
017A:  BCF    F95.1
....................    lcd_rw_tris(); 
017C:  BCF    F95.2
....................  #endif 
....................      
....................    delay_ms(15); 
017E:  MOVLW  0F
0180:  MOVWF  21
0182:  RCALL  000C
....................    for(i=1;i<=3;++i) 
0184:  MOVLW  01
0186:  MOVWF  15
0188:  MOVF   15,W
018A:  SUBLW  03
018C:  BNC   019E
....................    { 
....................        lcd_send_nibble(3); 
018E:  MOVLW  03
0190:  MOVWF  28
0192:  RCALL  0034
....................        delay_ms(5); 
0194:  MOVLW  05
0196:  MOVWF  21
0198:  RCALL  000C
019A:  INCF   15,F
019C:  BRA    0188
....................    } 
....................     
....................    lcd_send_nibble(2); 
019E:  MOVLW  02
01A0:  MOVWF  28
01A2:  RCALL  0034
....................    delay_ms(5); 
01A4:  MOVLW  05
01A6:  MOVWF  21
01A8:  RCALL  000C
....................    for(i=0;i<=3;++i) 
01AA:  CLRF   15
01AC:  MOVF   15,W
01AE:  SUBLW  03
01B0:  BNC   01D0
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
01B2:  CLRF   03
01B4:  MOVF   15,W
01B6:  ADDLW  16
01B8:  MOVWF  FE9
01BA:  MOVLW  00
01BC:  ADDWFC 03,W
01BE:  MOVWF  FEA
01C0:  MOVFF  FEF,1A
01C4:  CLRF   25
01C6:  MOVFF  1A,26
01CA:  RCALL  010E
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01CC:  INCF   15,F
01CE:  BRA    01AC
01D0:  GOTO   03CE (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
01D4:  DECFSZ 22,W
01D6:  BRA    01DA
01D8:  BRA    01E0
....................       address=LCD_LINE_TWO; 
01DA:  MOVLW  40
01DC:  MOVWF  23
01DE:  BRA    01E2
....................    else 
....................       address=0; 
01E0:  CLRF   23
....................       
....................    address+=x-1; 
01E2:  MOVLW  01
01E4:  SUBWF  21,W
01E6:  ADDWF  23,F
....................    lcd_send_byte(0,0x80|address); 
01E8:  MOVF   23,W
01EA:  IORLW  80
01EC:  MOVWF  24
01EE:  CLRF   25
01F0:  MOVWF  26
01F2:  RCALL  010E
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01F4:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01F6:  MOVF   20,W
01F8:  XORLW  07
01FA:  BZ    020A
01FC:  XORLW  0B
01FE:  BZ    0214
0200:  XORLW  06
0202:  BZ    0224
0204:  XORLW  02
0206:  BZ    0230
0208:  BRA    023A
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
020A:  MOVLW  01
020C:  MOVWF  21
020E:  MOVWF  22
0210:  RCALL  01D4
0212:  BRA    0244
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0214:  CLRF   25
0216:  MOVLW  01
0218:  MOVWF  26
021A:  RCALL  010E
....................                      delay_ms(2); 
021C:  MOVLW  02
021E:  MOVWF  21
0220:  RCALL  000C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0222:  BRA    0244
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0224:  MOVLW  01
0226:  MOVWF  21
0228:  MOVLW  02
022A:  MOVWF  22
022C:  RCALL  01D4
022E:  BRA    0244
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0230:  CLRF   25
0232:  MOVLW  10
0234:  MOVWF  26
0236:  RCALL  010E
0238:  BRA    0244
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
023A:  MOVLW  01
023C:  MOVWF  25
023E:  MOVFF  20,26
0242:  RCALL  010E
....................      #endif 
....................    } 
0244:  RETURN 0
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... int16 A[8] = {0,0,0,0,0,0,0,0}; 
.................... void lectura_adc(void); 
.................... void main() 
*
036E:  CLRF   FF8
0370:  BCF    FD0.7
0372:  MOVF   FC1,W
0374:  ANDLW  C0
0376:  IORLW  0F
0378:  MOVWF  FC1
037A:  MOVLW  07
037C:  MOVWF  FB4
037E:  CLRF   04
0380:  CLRF   05
0382:  CLRF   06
0384:  CLRF   07
0386:  CLRF   08
0388:  CLRF   09
038A:  CLRF   0A
038C:  CLRF   0B
038E:  CLRF   0C
0390:  CLRF   0D
0392:  CLRF   0E
0394:  CLRF   0F
0396:  CLRF   10
0398:  CLRF   11
039A:  CLRF   12
039C:  CLRF   13
.................... { 
.................... // CONFIGURACION PWM 
....................   setup_ccp1(CCP_PWM); 
039E:  BCF    F94.2
03A0:  BCF    F8B.2
03A2:  MOVLW  0C
03A4:  MOVWF  FBD
03A6:  CLRF   FB7
03A8:  CLRF   FB6
....................    setup_ccp2(CCP_PWM); 
03AA:  BCF    F94.1
03AC:  BCF    F8B.1
03AE:  MOVWF  FBA
....................    setup_timer_2(T2_DIV_BY_1,250,1); // PWM de 1khz 
03B0:  MOVLW  00
03B2:  IORLW  04
03B4:  MOVWF  FCA
03B6:  MOVLW  FA
03B8:  MOVWF  FCB
....................    set_pwm1_duty(1000); 
03BA:  MOVWF  FBE
03BC:  MOVF   FBD,W
03BE:  ANDLW  CF
03C0:  MOVWF  FBD
....................    set_pwm2_duty(500); 
03C2:  MOVLW  7D
03C4:  MOVWF  FBB
03C6:  MOVF   FBA,W
03C8:  ANDLW  CF
03CA:  MOVWF  FBA
.................... //CONFIGURACION LCD  
....................    lcd_init(); 
03CC:  BRA    0154
.................... //CONFIGURACION DEL ADC 8 CANALES 
....................    setup_adc(adc_clock_div_2);  
03CE:  MOVF   FC0,W
03D0:  ANDLW  C0
03D2:  MOVWF  FC0
03D4:  BSF    FC0.7
03D6:  BSF    FC2.0
....................    setup_adc_ports(AN0_TO_AN7 |VSS_VDD); 
03D8:  MOVF   FC1,W
03DA:  ANDLW  C0
03DC:  IORLW  07
03DE:  MOVWF  FC1
....................    while(TRUE) 
....................    { 
....................       lcd_gotoxy(1,1); 
03E0:  MOVLW  01
03E2:  MOVWF  21
03E4:  MOVWF  22
03E6:  RCALL  01D4
....................       printf(lcd_putc,"hola"); 
03E8:  MOVLW  04
03EA:  MOVWF  FF6
03EC:  MOVLW  00
03EE:  MOVWF  FF7
03F0:  RCALL  0246
....................       delay_ms(1000); 
03F2:  MOVLW  04
03F4:  MOVWF  15
03F6:  MOVLW  FA
03F8:  MOVWF  21
03FA:  RCALL  000C
03FC:  DECFSZ 15,F
03FE:  BRA    03F6
....................       lectura_adc(); 
0400:  BRA    0266
....................       for(int x=0; x<8 ; x++) 
0402:  CLRF   14
0404:  MOVF   14,W
0406:  SUBLW  07
0408:  BNC   0456
....................       { 
....................          lcd_gotoxy(1,1); 
040A:  MOVLW  01
040C:  MOVWF  21
040E:  MOVWF  22
0410:  RCALL  01D4
....................          printf(lcd_putc,"%Lu",A[x]); 
0412:  BCF    FD8.0
0414:  RLCF   14,W
0416:  CLRF   03
0418:  ADDLW  04
041A:  MOVWF  FE9
041C:  MOVLW  00
041E:  ADDWFC 03,W
0420:  MOVWF  FEA
0422:  MOVFF  FEC,16
0426:  MOVF   FED,F
0428:  MOVFF  FEF,15
042C:  MOVLW  10
042E:  MOVWF  FE9
0430:  MOVFF  16,18
0434:  MOVFF  15,17
0438:  BRA    02B2
....................          delay_ms(1000); 
043A:  MOVLW  04
043C:  MOVWF  15
043E:  MOVLW  FA
0440:  MOVWF  21
0442:  RCALL  000C
0444:  DECFSZ 15,F
0446:  BRA    043E
....................          lcd_putc("\f"); 
0448:  MOVLW  0A
044A:  MOVWF  FF6
044C:  MOVLW  00
044E:  MOVWF  FF7
0450:  RCALL  0246
0452:  INCF   14,F
0454:  BRA    0404
....................       } 
0456:  BRA    03E0
....................     
....................       
....................    } 
.................... } 
.................... void lectura_adc(void) 
0458:  SLEEP 
.................... { 
....................    for(int x=0; x<8 ; x++) 
*
0266:  CLRF   15
0268:  MOVF   15,W
026A:  SUBLW  07
026C:  BNC   02AE
....................    { 
....................       set_adc_channel(x); 
026E:  RLCF   15,W
0270:  MOVWF  00
0272:  RLCF   00,F
0274:  MOVLW  FC
0276:  ANDWF  00,F
0278:  MOVF   FC2,W
027A:  ANDLW  C3
027C:  IORWF  00,W
027E:  MOVWF  FC2
....................       delay_us(10); 
0280:  MOVLW  02
0282:  MOVWF  00
0284:  DECFSZ 00,F
0286:  BRA    0284
0288:  BRA    028A
028A:  NOP   
....................       A[x] = read_adc(); 
028C:  BCF    FD8.0
028E:  RLCF   15,W
0290:  CLRF   03
0292:  ADDLW  04
0294:  MOVWF  FE9
0296:  MOVLW  00
0298:  ADDWFC 03,W
029A:  MOVWF  FEA
029C:  BSF    FC2.1
029E:  BTFSC  FC2.1
02A0:  BRA    029E
02A2:  MOVFF  FC3,FEF
02A6:  MOVFF  FC4,FEC
02AA:  INCF   15,F
02AC:  BRA    0268
....................    } 
02AE:  GOTO   0402 (RETURN)
....................      
.................... } 

Configuration Fuses:
   Word  1: C03F   PLL12 CPUDIV4 USBDIV XT FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
